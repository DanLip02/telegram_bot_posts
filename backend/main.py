from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
from dotenv import load_dotenv
import os
from database import db
load_dotenv()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    user_db = db.get_or_create_user_simple(user)

    if user_db:
        welcome_text = f"–†–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å, {user.first_name}! üòä"
    else:
        welcome_text = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ"

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–¥–µ–∂–¥—É", callback_data="add_clothes")],
        [InlineKeyboardButton("üëî –ü–æ–¥–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑", callback_data="create_outfit")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = f"{welcome_text}\n–ü–æ–¥—Å–∫–∞–∂–∏, —á—Ç–æ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã —Å–¥–µ–ª–∞—Ç—å?"

    await update.message.reply_text(message, reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /add
async def add_clothes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üëï –í–µ—Ä—Ö", callback_data="clothes_top")],
        [InlineKeyboardButton("üëñ –ù–∏–∑", callback_data="clothes_bottom")],
        [InlineKeyboardButton("üëü –û–±—É–≤—å", callback_data="clothes_shoes")],
        [InlineKeyboardButton("üß£ –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", callback_data="clothes_accessories")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = "–ö–∞–∫—É—é –æ–¥–µ–∂–¥—É —Ç—ã —Ö–æ—Ç–µ–ª –±—ã –¥–æ–±–∞–≤–∏—Ç—å?"

    if update.callback_query:
        query = update.callback_query
        await query.edit_message_text(text=message, reply_markup=reply_markup)
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /add
        await update.message.reply_text(message, reply_markup=reply_markup)
    # await update.message.reply_text(message)


async def handle_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, category):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()

    user = update.effective_user

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user.id] = {
        'category': category,
        'step': 'waiting_description'
    }

    category_names = {
        "clothes_top": "üëï –í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞",
        "clothes_bottom": "üëñ –ù–∏–∂–Ω—è—è –æ–¥–µ–∂–¥–∞",
        "clothes_shoes": "üëü –û–±—É–≤—å",
        "clothes_accessories": "üß£ –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã"
    }

    category_name = category_names.get(category, "–û–¥–µ–∂–¥–∞")

    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {category_name}\n\n"
        "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ —ç—Ç—É –≤–µ—â—å:\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ/—Ç–∏–ø\n"
        "‚Ä¢ –¶–≤–µ—Ç\n"
        "‚Ä¢ –†–∞–∑–º–µ—Ä\n"
        "‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ\n"
        "‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏\n\n"
        "–ü—Ä–∏–º–µ—Ä: *–ö—Ä–∞—Å–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ Nike, —Ä–∞–∑–º–µ—Ä M, –æ—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ*",
        parse_mode='Markdown'
    )

async def handle_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    user = update.effective_user
    description = update.message.text

    if user.id in user_states and user_states[user.id]['step'] == 'waiting_description':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        user_states[user.id]['description'] = description
        user_states[user.id]['step'] = 'waiting_photo'

        await update.message.reply_text(
            "üìù –û—Ç–ª–∏—á–Ω–æ! –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n"
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —ç—Ç–æ–π –≤–µ—â–∏:"
        )
    else:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ /start")



async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ"""
    user = update.effective_user

    if user.id in user_states and user_states[user.id]['step'] == 'waiting_photo':
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]
        file_id = photo.file_id

        user_data = user_states[user.id]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        post = db.add_product_simple(
            user=user,
            category=user_data['category'],
            description=user_data['description'],
            photo_file_id=file_id
        )

        if post:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            del user_states[user.id]

            await update.message.reply_text(
                "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
                f"üÜî ID –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: #{post['id']}\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {user_data['category']}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {user_data['description']}\n\n"
                "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_clothes")],
                    [InlineKeyboardButton("üìã –ú–æ–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data="my_posts")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    else:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ–ø–∏—à–∏—Ç–µ –≤–µ—â—å")

async def show_user_posts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()

    user = update.effective_user
    posts = db.get_user_posts(user.id)

    if not posts:
        await query.edit_message_text(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π.\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –≤–µ—â—å –≤ —Å–≤–æ–π –≥–∞—Ä–¥–µ—Ä–æ–±!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–¥–µ–∂–¥—É", callback_data="add_clothes")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
        return

    message = "üìã –í–∞—à–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n\n"
    for post in posts[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        message += f"‚Ä¢ #{post['id']} - {post['category']}\n"
        message += f"  {post['description'][:50]}...\n\n"

    if len(posts) > 10:
        message += f"... –∏ –µ—â–µ {len(posts) - 10} –ø—É–±–ª–∏–∫–∞—Ü–∏–π"

    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_clothes")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "add_clothes":
        await add_clothes(update, context)
    elif data == "my_posts":
        await show_user_posts(update, context)
    elif data == "create_outfit":
        await query.edit_message_text("–ü–æ–¥–±–∏—Ä–∞—é –æ–±—Ä–∞–∑ –¥–ª—è –≤–∞—Å...")
    elif data in ["clothes_top", "clothes_bottom", "clothes_shoes", "clothes_accessories"]:
        await handle_category_selection(update, context, data)
    elif data == "back_to_main":
        await start_from_callback(update, context)
    elif data == "help":
        await query.edit_message_text(
            "ü§ñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –æ–¥–µ–∂–¥—É - –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–µ—â–∏ –≤ —Å–≤–æ–π –≥–∞—Ä–¥–µ—Ä–æ–±\n"
            "‚Ä¢ –ú–æ–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–∞—à–∏—Ö –≤–µ—â–µ–π\n"
            "‚Ä¢ –ü–æ–¥–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑ - —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–ø–ª–µ–∫—Ç –∏–∑ –≤–∞—à–µ–π –æ–¥–µ–∂–¥—ã"
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ callback
async def start_from_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–¥–µ–∂–¥—É", callback_data="add_clothes")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data="my_posts")],
        [InlineKeyboardButton("üëî –ü–æ–¥–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑", callback_data="create_outfit")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!\n–ü–æ–¥—Å–∫–∞–∂–∏, —á—Ç–æ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã —Å–¥–µ–ª–∞—Ç—å?"

    await update.callback_query.edit_message_text(
        message,
        reply_markup=reply_markup
    )

def main():
    # –¢–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç @BotFather

    BOT_TOKEN = os.getenv("API_TOKEN")

    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_description))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î!")
    application.run_polling()

if __name__ == '__main__':
    main()